using System;
using System.Collections.Generic;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text;

public class ZippingSlicedFiles
{
    static List<string> filesPaths = new List<string>();

    static void Main()
    {
        string sourceFilePath = @"../../ZippingSlicedFiles.cs";
        string destinationDirectory = @"../../";
        int parts = 5;//int.Parse(Console.ReadLine());

        SliceAndCompress(sourceFilePath, destinationDirectory, parts);

        AssembleAndDecompress(destinationDirectory);
    }

    private static void SliceAndCompress(string sourceFilePath, string destinationDirectory, int parts)
    {

        List<byte> fileContent = new List<byte>();
        using (var sourceFile = new FileStream(sourceFilePath, FileMode.Open))
        {
            byte[] buffer = new byte[4096];
            while (true)
            {
                int readBytes = sourceFile.Read(buffer, 0, buffer.Length);
                if (readBytes == 0)
                {
                    break;
                }

                for (int i = 0; i < readBytes; i++)
                {
                    fileContent.Add(buffer[i]);
                }
            }
        }

        int slicedFilesSize = fileContent.Count / parts;
        int remainingBytes = fileContent.Count - (slicedFilesSize * parts);
        for (int i = 0; i < parts; i++)
        {
            string filePath = destinationDirectory + string.Format(@"Part-{0}.zip", i);
            using (var slicedFile = new FileStream(filePath, FileMode.Create))
            {
                using (var compressedFile = new GZipStream(slicedFile, CompressionMode.Compress))
                {
                    if (i == parts - 1)
                    {
                        compressedFile.Write(fileContent.ToArray(), slicedFilesSize * i, slicedFilesSize + remainingBytes);
                        continue;
                    }

                    compressedFile.Write(fileContent.ToArray(), slicedFilesSize * i, slicedFilesSize);
                }
            }

            filesPaths.Add(filePath);
        }
    }

    private static void AssembleAndDecompress(string destinationDirectory)
    {
        string assembledFilePath = destinationDirectory + "assembled.pgn";

        List<byte> assembledFileData = new List<byte>();
        for (int i = 0; i < filesPaths.Count; i++)
        {
            using (var currentFile = new FileStream(filesPaths[i], FileMode.Open))
            {
                using (var compressedFile = new GZipStream(currentFile, CompressionMode.Decompress))
                {
                    byte[] buffer = new byte[4096];
                    while (true)
  